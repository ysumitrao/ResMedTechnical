//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

[DataContract(IsReference = true)]
[KnownType(typeof(StockFile))]
public partial class Site: IObjectWithChangeTracker, INotifyPropertyChanged
{
    #region Primitive Properties

    [DataMember]
    public int ID
    {
        get { return _iD; }
        set
        {
            if (_iD != value)
            {
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                {
                    throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                }
                _iD = value;
                OnPropertyChanged("ID");
            }
        }
    }
    private int _iD;

    [DataMember]
    public string Format
    {
        get { return _format; }
        set
        {
            if (_format != value)
            {
                _format = value;
                OnPropertyChanged("Format");
            }
        }
    }
    private string _format;

    [DataMember]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                OnPropertyChanged("Name");
            }
        }
    }
    private string _name;

    [DataMember]
    public string Url
    {
        get { return _url; }
        set
        {
            if (_url != value)
            {
                _url = value;
                OnPropertyChanged("Url");
            }
        }
    }
    private string _url;

    #endregion

    #region Navigation Properties

    [DataMember]
    public TrackableCollection<StockFile> StockFiles
    {
        get
        {
            if (_stockFiles == null)
            {
                _stockFiles = new TrackableCollection<StockFile>();
                _stockFiles.CollectionChanged += FixupStockFiles;
            }
            return _stockFiles;
        }
        set
        {
            if (!ReferenceEquals(_stockFiles, value))
            {
                if (ChangeTracker.ChangeTrackingEnabled)
                {
                    throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                }
                if (_stockFiles != null)
                {
                    _stockFiles.CollectionChanged -= FixupStockFiles;
                }
                _stockFiles = value;
                if (_stockFiles != null)
                {
                    _stockFiles.CollectionChanged += FixupStockFiles;
                }
                OnNavigationPropertyChanged("StockFiles");
            }
        }
    }
    private TrackableCollection<StockFile> _stockFiles;

    #endregion

    #region ChangeTracking

    protected virtual void OnPropertyChanged(String propertyName)
    {
        if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
        {
            ChangeTracker.State = ObjectState.Modified;
        }
        if (_propertyChanged != null)
        {
            _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    protected virtual void OnNavigationPropertyChanged(String propertyName)
    {
        if (_propertyChanged != null)
        {
            _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    private event PropertyChangedEventHandler _propertyChanged;
    private ObjectChangeTracker _changeTracker;

    [DataMember]
    public ObjectChangeTracker ChangeTracker
    {
        get
        {
            if (_changeTracker == null)
            {
                _changeTracker = new ObjectChangeTracker();
                _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
            return _changeTracker;
        }
        set
        {
            if(_changeTracker != null)
            {
                _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
            }
            _changeTracker = value;
            if(_changeTracker != null)
            {
                _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
        }
    }

    private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    {
        if (e.NewState == ObjectState.Deleted)
        {
            ClearNavigationProperties();
        }
    }

    protected bool IsDeserializing { get; private set; }

    [OnDeserializing]
    public void OnDeserializingMethod(StreamingContext context)
    {
        IsDeserializing = true;
    }

    [OnDeserialized]
    public void OnDeserializedMethod(StreamingContext context)
    {
        IsDeserializing = false;
        ChangeTracker.ChangeTrackingEnabled = true;
    }

    protected virtual void ClearNavigationProperties()
    {
        StockFiles.Clear();
    }

    #endregion

    #region Association Fixup

    private void FixupStockFiles(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (IsDeserializing)
        {
            return;
        }

        if (e.NewItems != null)
        {
            foreach (StockFile item in e.NewItems)
            {
                item.Site = this;
                if (ChangeTracker.ChangeTrackingEnabled)
                {
                    if (!item.ChangeTracker.ChangeTrackingEnabled)
                    {
                        item.StartTracking();
                    }
                    ChangeTracker.RecordAdditionToCollectionProperties("StockFiles", item);
                }
            }
        }

        if (e.OldItems != null)
        {
            foreach (StockFile item in e.OldItems)
            {
                if (ReferenceEquals(item.Site, this))
                {
                    item.Site = null;
                }
                if (ChangeTracker.ChangeTrackingEnabled)
                {
                    ChangeTracker.RecordRemovalFromCollectionProperties("StockFiles", item);
                }
            }
        }
    }

    #endregion

}
