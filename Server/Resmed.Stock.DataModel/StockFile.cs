//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

[DataContract(IsReference = true)]
[KnownType(typeof(Site))]
[KnownType(typeof(StockSymbol))]
public partial class StockFile: IObjectWithChangeTracker, INotifyPropertyChanged
{
    #region Primitive Properties

    [DataMember]
    public int ID
    {
        get { return _iD; }
        set
        {
            if (_iD != value)
            {
                if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                {
                    throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                }
                _iD = value;
                OnPropertyChanged("ID");
            }
        }
    }
    private int _iD;

    [DataMember]
    public int SiteId
    {
        get { return _siteId; }
        set
        {
            if (_siteId != value)
            {
                ChangeTracker.RecordOriginalValue("SiteId", _siteId);
                if (!IsDeserializing)
                {
                    if (Site != null && Site.ID != value)
                    {
                        Site = null;
                    }
                }
                _siteId = value;
                OnPropertyChanged("SiteId");
            }
        }
    }
    private int _siteId;

    [DataMember]
    public int StockId
    {
        get { return _stockId; }
        set
        {
            if (_stockId != value)
            {
                ChangeTracker.RecordOriginalValue("StockId", _stockId);
                if (!IsDeserializing)
                {
                    if (StockSymbol != null && StockSymbol.ID != value)
                    {
                        StockSymbol = null;
                    }
                }
                _stockId = value;
                OnPropertyChanged("StockId");
            }
        }
    }
    private int _stockId;

    [DataMember]
    public string FileName
    {
        get { return _fileName; }
        set
        {
            if (_fileName != value)
            {
                _fileName = value;
                OnPropertyChanged("FileName");
            }
        }
    }
    private string _fileName;

    [DataMember]
    public string File
    {
        get { return _file; }
        set
        {
            if (_file != value)
            {
                _file = value;
                OnPropertyChanged("File");
            }
        }
    }
    private string _file;

    [DataMember]
    [DisplayName("Downloaded Date")]
    public Nullable<System.DateTime> DownloadedDate
    {
        get { return _downloadedDate; }
        set
        {
            if (_downloadedDate != value)
            {
                _downloadedDate = value;
                OnPropertyChanged("DownloadedDate");
            }
        }
    }
    private Nullable<System.DateTime> _downloadedDate;

    #endregion

    #region Navigation Properties

    [DataMember]
    public Site Site
    {
        get { return _site; }
        set
        {
            if (!ReferenceEquals(_site, value))
            {
                var previousValue = _site;
                _site = value;
                FixupSite(previousValue);
                OnNavigationPropertyChanged("Site");
            }
        }
    }
    private Site _site;

    [DataMember]
    public StockSymbol StockSymbol
    {
        get { return _stockSymbol; }
        set
        {
            if (!ReferenceEquals(_stockSymbol, value))
            {
                var previousValue = _stockSymbol;
                _stockSymbol = value;
                FixupStockSymbol(previousValue);
                OnNavigationPropertyChanged("StockSymbol");
            }
        }
    }
    private StockSymbol _stockSymbol;

    #endregion

    #region ChangeTracking

    protected virtual void OnPropertyChanged(String propertyName)
    {
        if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
        {
            ChangeTracker.State = ObjectState.Modified;
        }
        if (_propertyChanged != null)
        {
            _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    protected virtual void OnNavigationPropertyChanged(String propertyName)
    {
        if (_propertyChanged != null)
        {
            _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    private event PropertyChangedEventHandler _propertyChanged;
    private ObjectChangeTracker _changeTracker;

    [DataMember]
    public ObjectChangeTracker ChangeTracker
    {
        get
        {
            if (_changeTracker == null)
            {
                _changeTracker = new ObjectChangeTracker();
                _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
            return _changeTracker;
        }
        set
        {
            if(_changeTracker != null)
            {
                _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
            }
            _changeTracker = value;
            if(_changeTracker != null)
            {
                _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
            }
        }
    }

    private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    {
        if (e.NewState == ObjectState.Deleted)
        {
            ClearNavigationProperties();
        }
    }

    protected bool IsDeserializing { get; private set; }

    [OnDeserializing]
    public void OnDeserializingMethod(StreamingContext context)
    {
        IsDeserializing = true;
    }

    [OnDeserialized]
    public void OnDeserializedMethod(StreamingContext context)
    {
        IsDeserializing = false;
        ChangeTracker.ChangeTrackingEnabled = true;
    }

    protected virtual void ClearNavigationProperties()
    {
        Site = null;
        StockSymbol = null;
    }

    #endregion

    #region Association Fixup

    private void FixupSite(Site previousValue)
    {
        if (IsDeserializing)
        {
            return;
        }

        if (previousValue != null && previousValue.StockFiles.Contains(this))
        {
            previousValue.StockFiles.Remove(this);
        }

        if (Site != null)
        {
            if (!Site.StockFiles.Contains(this))
            {
                Site.StockFiles.Add(this);
            }

            SiteId = Site.ID;
        }
        if (ChangeTracker.ChangeTrackingEnabled)
        {
            if (ChangeTracker.OriginalValues.ContainsKey("Site")
                && (ChangeTracker.OriginalValues["Site"] == Site))
            {
                ChangeTracker.OriginalValues.Remove("Site");
            }
            else
            {
                ChangeTracker.RecordOriginalValue("Site", previousValue);
            }
            if (Site != null && !Site.ChangeTracker.ChangeTrackingEnabled)
            {
                Site.StartTracking();
            }
        }
    }

    private void FixupStockSymbol(StockSymbol previousValue)
    {
        if (IsDeserializing)
        {
            return;
        }

        if (previousValue != null && previousValue.StockFiles.Contains(this))
        {
            previousValue.StockFiles.Remove(this);
        }

        if (StockSymbol != null)
        {
            if (!StockSymbol.StockFiles.Contains(this))
            {
                StockSymbol.StockFiles.Add(this);
            }

            StockId = StockSymbol.ID;
        }
        if (ChangeTracker.ChangeTrackingEnabled)
        {
            if (ChangeTracker.OriginalValues.ContainsKey("StockSymbol")
                && (ChangeTracker.OriginalValues["StockSymbol"] == StockSymbol))
            {
                ChangeTracker.OriginalValues.Remove("StockSymbol");
            }
            else
            {
                ChangeTracker.RecordOriginalValue("StockSymbol", previousValue);
            }
            if (StockSymbol != null && !StockSymbol.ChangeTracker.ChangeTrackingEnabled)
            {
                StockSymbol.StartTracking();
            }
        }
    }

    #endregion

}
